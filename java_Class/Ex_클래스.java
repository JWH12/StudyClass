package java_Class;

public class Ex_클래스 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/*
		객체는 객체마다 고유한 특성(변수)와 행동(메소드)를 가진 것을 말한다. ex)객체 = 파워포인트(특성=변수) + 파워포인트 기능(행동=메소드)  
		다른 객체들과 정보를 주고 받는 등 상호작용하는 것을 객체지향이라고 한다.
		
		
		
		클래스 : 객체 모양을 선언한 틀 / 구체화되지 않은 것 (= 설계도) ex) 붕어빵 틀(클래스), 붕어빵 (객체), 팥 or 슈크림()
				클래스를 만들 때 고유의 특성을 바꿔서 만들 수 있다. (구체화가 안된 것)
		
		객체(인스턴스) : 클래스의 설계대로 특성과 행동으로 실체화 된 것 (구체화 된 것)
		
		============객체지향 특징 1===========
		캡슐화 : 객체를 캡슐롸 싸서 내부를 볼 수 없게 하는 것 = 내부구조를 알 필요 없이 외부정보만으로 사용하는 것 
		ex) 리모콘을 사용할 때 내부 구조를 몰라고 버튼을 눌러서 실행시키는 것과 같은 이치
		
		
		==============객체지향 특징 2==========
		상속 : 상위에있는 객체(부모클래스 = 슈퍼클래스)가 공통적인 특성을 하위에 있는 객체(하위클래스)에 넘겨주고 하위에 있는 객체는 
		      본인만의 또다른 특성을 보유한 뒤 본인보다 하위에 있는 객체에 공통적인 특성을 물려주는 것 
		
		서브클래스 : class human *extends Animal 
				  → extends를 사용하면 human이라는 개체에 슈퍼클래스의 특성을 물려준다. 
				  → 부모클래스의 특성을 받은 human은 부모클래스의 특성 + 본인만의 특성을 보유할 수 있다
				  
	    
	    
	    =================객체지향 특징 3=============
	    
	    다형성 : 같은 이름에 메소드가 클래스나 객체에 따라 다양하게 출력이 가능한 것
	     
	     메소드 오버라이딩(재정) : 부모클래스의 메소드를 서브 클래스마다 다르게 구현 즉 하위클래스에서 본인의 특징에 맞게 변경한느 것
	      				ex) 동물들의 모두 다른 울음소리 speak() = 강아지 고양이 닭 등등 */
	    
	    
	    		  
	   /*
		★ 생성자의 특징은 객체를 실행할 때 출력된다.
		  클래스 이름과 같은 메소드(생성자)는 객체를 만들 때 자동으로 한번 호출이 된다
	    		  
	    ★ 오버로딩이란 : 자바의 한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메소드가 있더라도 매개변수의 개수 또는 타입이 다르면, 
					같은 이름을 사용해서 메소드를 정의할 수 있다.
					
			오버로딩 조건 : 메소드의 이름이 같고, 매개변수의 개수나 타입이 달라야 한다. 주의할 점은 '리턴 값만' 다른 것은 오버로딩을 할 수 없다는 것이다.
		
		
		★ 오버라이딩		  
		 	
		
		=====검색========== 클래스 선언
		
	    
		
		필드란 객체 내에 값을 저장하는 멤버변수
		
		
		=====검색========== 레퍼런스 변수
		
		
		
				
				
				
				
				
				*/
				
				
		
				
		
		

	}

}
